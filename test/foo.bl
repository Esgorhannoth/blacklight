;; Reading a File

$new         ;; creates new stack(2), pushing old stack(1) onto the meta-stack
o-new        ;; creates a new object(1) and puts it on top of the @stack
errs:        ;; creates slot ‘errs’ on object(1) and stores reference to stack(1)
             ;; the @stack now only contains object(1)
'examples/hello_world.bl'
             ;; ^- put a character-vector on the stack
q-new        ;; creates a new queue(1) and puts it on top of the @stack
read         ;; opens the 'text.txt' file for reading
q-to-t       ;; converts the contents of the queue into text giving us “Hello world!"
greeting:    ;; make the object into [errs:s1 greeting:’Hello world!’]

;; Inverting a Stack

<> @
. drop rot swap push swap .
. @ depth swap drop 0 eq rot rot 2 drop .
until

;; A Slot Chaining Implementation

o-new        ;; this will be our root object
.            ;; start of send, expects: @< … wv o1 >
  swap       ;; the o will be on top, there should be a WV below it
  v-to-s     ;; convert the wv to a series of word items on a user-stack
  :_chain    ;; store user-stack in object
             ;; end of init
  :verify    ;; begin verify/call recursion
             ;; start of deinit
  nil
  :_chain    ;; remove the user-stack we created above
. send:

.            ;; expects @< ... o >
  ..         ;; create a new sub-wv for if success
    :call    ;; continue execution
  ..
  ..
    :_chain       ;; summon chain stack
    size 0 eq     ;; compare size of user-stack to 0
    not           ;; not equal to 0
    swap drop     ;; eq only drops one item
  .. if           ;; @< … o >
. verify:

.            ;; expects @< … o >
  :_chain    ;; @< ... o s >
  pop        ;; get a w from the user-stack and put onto the @stack
  rot swap   ;; makes our @stack like @< … s o w >
  get        ;; get the value in slot w @< … s o i >

  ;; this assumes we only ever put exactly 1 item on the @stack
  swap

  ;; remove above swap and put this instead
  ;; once the auto-destructing self is in place
  ;; this will allow for non-1 stack changes
  ;;self

  :verify   ;; continue processing the chain
. call:

;; Below is a WIP for send that calls “send” on any returned object
;; instead of re-using the starting send, ignore for now

.
  :send     ;; call the send available on *that* object
.         ;; end block
send:     ;; save send slot
.         ;; this begins our “method chain"
  :false     ;; first we’ll access the slot with this name
  :is-false  ;; then, we’ll access the slot from that
.           ;; end method chain
swap      ;; put the o on top so we can use the get-slot below
:send     ;; this should send the above series of messages through the objects

;; Converting c's into a T Using an until Loop

nil
\! \o \l \l \e \H
v-new
. swap app .
. nil is .
until
drop
;; @< ‘Hello!' >

;; Converting c’s into a T Using an Object and Recursion

o-new                        ;; create a new object to store our function
.                            ;; start a wv block for our entry function
  v-new                        ;; create a new vector for our conversion
  swap                         ;; put the object back on top
  :loop-c-to-v                 ;; this will call the loop function
.                            ;; end block
c-to-v:                      ;; store our entry function
.                            ;; start a wv block for our loop function
  swap                         ;; get the c beneath our o
  app                         ;; pop the c and put it into the v
  self                         ;; reference self (self references auto-destruct)
  ~loop-c-to-v                 ;; specify name of own slot
  fetch                        ;; fetch own function (this currently running one)
  rot                          ;; bring 3rd item to top
  C is if                         ;; check to see if the top item is a c and loop if so
.                            ;; end block
loop-c-to-v:                 ;; store our recursive function
$new                         ;; new @stack
\! \o \l \l \e \H            ;; dump in our c's
^ pop dup rot push drop  ;; retrieve our object
:c-to-v                      ;; call our looping function
swap drop                    ;; get rid of the o
;; @< ‘Hello!’ >                  ;; the contents of @stack is a T

;; Faking o-fetch

o-new
. dup mul .    ;; just an example wv: the basic implementation of sqr
v-to-q       ;; convert the wv into a q
swap drop    ;; get rid of the wv
fetch_sqr:   ;; set slot “fetch_sqr” on o to q
drop         ;; we’re done with the q
. :fetch_sqr q-to-v call 2 drop .  ;; function to get and call sqr_q
sqr:         ;; store function
2 swap :sqr  ;;=> 4
drop         ;; drop the 4
:fetch_sqr   ;;=> . dup mul .

;; Replicating q-to-v with an proq Loop

;; given @< {} >
() swap . deq app . proq

